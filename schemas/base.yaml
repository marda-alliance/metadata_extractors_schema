---
name: base
version: 0.2.0
id: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/base
prefixes:
    linkml: https://w3id.org/linkml/
    schema_org: http://schema.org/
    dcmitype: http://purl.org/dc/dcmitype/1.1
    dc_terms: http://purl.org/dc/terms/1.1/
    mme_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
imports:
    - linkml:types
default_range: string
description: >-
    This file describes the generic slots used by models in the MaRDA extractors WG.


classes:
    Citation:
        description: >-
            A container for a citation or another form of attribution for the parent
            resource.
        attributes:
            uri:
                slot_uri: dc_terms:identifier
                required: false
                description: >-
                    An unambiguous reference to the resource within a given context.
                comments:
                    - Recommended practice is to identify the resource by means of
                      a string conforming to an identification system.
                    - >-
                      Examples include:
                       - International Standard Book Number (ISBN),
                       - Digital Object Identifier (DOI), and
                       - Uniform Resource Name (URN).
                      Persistent identifiers should be provided as HTTP URIs.
            creators:
                slot_uri: dc_terms:creator
                multivalued: true
                description: >-
                    A list of the creators of the resource.
            contributors:
                slot_uri: dc_terms:contributor
                multivalued: true
                description: >-
                    A list of the contributors to the resource.
            title:
                required: false
                slot_uri: dc_terms:title
                description: >-
                    A name given to the resource [from DC].
            type:
                required: false
                slot_uri: dc_terms:type
                description: >-
                    Any bibliographic resource type (e.g., article, dataset, software)
                    enumerated in the DCMI Type Vocabulary.
    License:
        description: >-
            A container for the licensing information related to the parent resource.
        attributes:
            uri:
                slot_uri: dc_terms:identifier
                required: false
                description: >-
                    An unambiguous reference to the resource within a given context.
            spdx:
                slot_uri: dc_terms:identifier
                required: false
                description: >-
                    An SPDX License Identifier entry.

    SupportedFileType:
        description: >-
            An specification of a `FileType`, supported by the parent `Extractor`.
        attributes:
            id:
                description: >-
                    A reference to the registered MarDA `FileType->id` for this file
                    type.
            description:
                description: Free-text description of caveats or instructions specific
                    to this file type.
            template:
                description: >-
                    A mechanism for overriding the template values for this file type
                    in the usage instructions.
                range: UsageTemplate
                required: false

    UsageTemplate:
        description: >-
            A container for specifying string substitution templates for usage specification,
            [see `Usage` class](Usage.md).
        comments:
            - The attributes below can be applied as templates using `{{ attr }}`
              notation.
            - The default values of the listed attributes can be overriden in this
              way using the specification of supported filetypes, [see `SupportedFileType`
              class](SupportedFileType.md).
            - >-
              For instance, if an `extractor` supports the `example` file type, but
              expects:

                extractor --filetype xmpl inputfile.bla

              one could set `input_type: xmpl` and specify the following in the `Usage`
              class:

                extractor --filetype {{ input_type }} {{ input_path }}

        attributes:
            input_path:
                description: >-
                    The location of the resource (e.g., file, or directory) on disk
                    to be extracted. Required.
            input_type:
                description: >-
                    The `FileType` of the `input_path`. Defaults to the `FileType->id`
                    for each supported file type.
            output_path:
                description: >-
                    The location where the output of the extraction will be written
                    to disk. Defaults to the `Extractor` default.
            output_type:
                description: >-
                    The `FileType` of the `output_path`, for `Extractors` supporting
                    multiple output `FileTypes`. Defaults to the `FileType->id` for
                    each supported output file type.

    Usage:
        description: >-
            A machine-actionable specification of a set of usage instructions of the
            parent `Extractor`.
        attributes:
            method:
                required: true
                range: UsageTypes
                description: >-
                    Usage invocation method, e.g. from a command line or from Python.
            setup:
                description: >-
                    Any necessary setup step for the 'command' to become available:
                      - for `method: python`, this is an argument to Python's `import`
            command:
                required: true
                description: >-
                    A machine-executable command by which the `Extractor` functionality
                    can be accessed.
                comments:
                    - >-
                      For `method: cli`, a parametrized executable invocation which
                      should be available after installing the `Extractor`;
                    - >-
                      For `method: python`, a parametrized function invocation which
                      should be available after installing and setting up the `Extractor`.
                    - The templated parameters which can be requested from the user
                      are [described by the `UsageTemplate` class](UsageTemplate.md).
            scope:
                required: false
                range: UsageScope
                description: >-
                    Specification of extraction scope.


    Installation:
        description: >-
            A machine-actionable specification of a set of installation instructions
            for the parent `Extractor`.
        attributes:
            method:
                required: true
                range: InstallerTypes
                description: >-
                    Extractor installer, specifying the package manager to process
                    the installation instructions with.
            requires_python:
                required: false
                description: >-
                    A PEP 440 version string for the version constraints on the
                    Python version required for this extractor.
            requirements:
                description: >-
                    Contents of a 'requirements.txt'-like file. Will be installed
                    by the selected Installer using an appropriate method, e.g.,
                    `pip install -r requirements.txt` for pip, or
                    `conda env create -f requirements.txt` for conda.
            packages:
                multivalued: true
                description: >-
                    A list of packages, including versioned packages or `git+https://`
                    targets, to be installed using the Installer.


slots:
    id:
        identifier: true
        slot_uri: schema_org:identifier
        required: true
        description: >-
            A unique identifier for the entry within the MaRDA
            registry namespace, this should be a shorthand label rather than
            a UUID. Only lower-case alphanumeric and dash ("-") characters
            are permitted.
        pattern: ^[a-z]+[a-z,0-9,-]*[a-z,0-9]+$
    name:
        slot_uri: schema_org:name
        required: true
        description: >-
            A recognisable name for the entry.
    description:
        slot_uri: schema_org:description
        required: true
        description: >-
            A human-readable outline of the entry, its format,
            data content and uses.
    subject:
        slot_uri: dc_terms:subject
        multivalued: true
        description: >-
            Any keywords, phrases or classification codes that are relevant
            to the entry, e.g., particular scientific domains of applicability,
            or experimental techniques.
    citations:
        slot_uri: dcmitype:BibliographicReference
        multivalued: true
        required: false
        range: Citation
        description: >-
            A citation or citations for the entry, to be provided should it be used
            in academic work (or otherwise).
    license:
        slot_uri: dc_terms:license
        required: true
        range: License
        description: >-
            A URL, URI or SPDX license identifier for a legal document giving
            official permission to do something with the resource.


enums:
    UsageTypes:
        permissible_values:
            cli:
                description: >-
                    Access the Extractor as a command line executable. The executable
                    as well as the invocation syntax, parametrised using arguments,
                    shall be supplied in the `command` slot.
            python:
                description: >-
                    Access the Extractor as a Python function. The function should
                    be available when `import <setup>` is called, and should be
                    specified including relevant namespaces. The function signature,
                    parametrised using arguments, shall be supplied in the `command`
                    slot.
    UsageScope:
        description: >-
            This enumeration allows the `Extractor->usage` to be described
            in one of two modes, `meta-only` and `meta+data`, whereby
            either a summary of file metadata, or the full file is returned
            by the `Extractor`, respectively. In practice, this means that extractors
            may have multiple defined usage modes for each scope and each
            execution method. The default is to assume the 'worst case', i.e. that
            the extractor returns as much of the data in the input file as
            it supports, plus potentially additional analysis.
        permissible_values:
            meta-only:
                description: >-
                    This usage scope only returns metadata associated with the file,
                    with the interpretatio of "metadata" left up to the `Extractor`.
                comments:
                    - >-
                      This may include, but is not limited to:
                        - timestamps,
                        - column headings,
                        - data types, and
                        - data shapes.
                    - The size of data returned in this mode should be limited and
                      will typically be much smaller than the file size.
                    - This metadata SHOULD be expressed as a JSON-serializable document
                      that can, for example, be loaded into Python with only standard
                      library imports.
            meta+data:
                description: >-
                    This usage scope refers to a "full" extraction of the file, whereby
                    the extractor tries to faithfully interpret and return all supported
                    information contained within the file.
                comments:
                    - >-
                      This may include, but is not limited to:
                        - binary data,
                        - large multi-dimensional arrays,
                        - plus all of the associated metadata from a `meta-only` extraction.
                    - The size of the data returned in this mode is not limited and
                      could be significantly larger than the input file size (in the
                      case of binary data, or additional analysis being performed
                      upon extraction).
    InstallerTypes:
        description: >-
            This enumeration allows the `Extractor->installation` to specify which
            installer software is to be used for the installation of the `Extractor`.
        permissible_values:
            pip:
                description: >-
                    Install the Extractor using 'pip'. Will process `packages` using
                    `pip install` and `requirements` using `pip install -r`.
            conda:
                description: >-
                    Install the Extractor using 'conda'.
                comments:
                    - Note that installation using `conda` is not yet supported by
                      the API.
